/**
 * Ê®°ÂºèÈÄâÊã©Âô® - Ë¥üË¥£WebSocketËøûÊé•ÁÆ°ÁêÜÂíåÊ®°ÂºèÂàáÊç¢
 * ÂÆûÁé∞‰∫ÜÂçï‰æãWebSocketËøûÊé•ÔºåÊîØÊåÅLANÂíåInternetÊ®°ÂºèÊó†ÁºùÂàáÊç¢
 */
class ModeSelector {
    constructor() {
        // Ê®°ÂºèÁä∂ÊÄÅ
        this.currentMode = 'lan';
        this.chatModeInstance = null;
        this.isInitialized = false;
        
        // WebSocketËøûÊé•Áä∂ÊÄÅ
        this.websocket = null;
        this.isWebSocketConnected = false;
        this.reconnectionAttempts = 0;
        this.currentServerIndex = 0;
        this.availableServers = [];
        this.heartbeatTimer = null;
        
        // Á≠âÂæÖDOMÂä†ËΩΩÂÆåÊàê
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    async init() {
        this.initializeElements();
        this.bindEvents();
        
        // ÂÖàÂª∫Á´ãWebSocketËøûÊé•
        await this.connectToAvailableServer();
        
        // ÈªòËÆ§Âä†ËΩΩÂ±ÄÂüüÁΩëÊ®°Âºè
        await this.loadMode('lan');
        this.isInitialized = true;
    }
    
    /**
     * ÂàùÂßãÂåñDOMÂÖÉÁ¥†ÂºïÁî®
     */
    initializeElements() {
        this.elements = {
            lanModeButton: document.getElementById('lanMode'),
            internetModeButton: document.getElementById('internetMode'),
            autoConnectInfo: document.getElementById('autoConnectInfo'),
            manualConnectInfo: document.getElementById('manualConnectInfo')
        };
    }
    
    /**
     * ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    bindEvents() {
        this.elements.lanModeButton.addEventListener('click', () => this.switchMode('lan'));
        this.elements.internetModeButton.addEventListener('click', () => this.switchMode('internet'));
    }
    
    // WebSocketËøûÊé•ÁÆ°ÁêÜ
    async connectToAvailableServer() {
        try {
            const response = await fetch('assets/servers.json');
            const data = await response.json();
            
            if (!data.servers || data.servers.length === 0) {
                this.showNotification('‚ùå Ê≤°ÊúâÂèØÁî®ÁöÑÊúçÂä°Âô®ÈÖçÁΩÆ');
                return;
            }
            
            this.availableServers = data.servers.sort((a, b) => (a.priority || 999) - (b.priority || 999));
            this.tryNextServer();
        } catch (error) {
            console.error('Failed to load server list:', error);
            this.showNotification('‚ùå Âä†ËΩΩÊúçÂä°Âô®ÂàóË°®Â§±Ë¥•');
        }
    }
    
    tryNextServer() {
        if (this.currentServerIndex >= this.availableServers.length) {
            this.showNotification('‚ùå ÊâÄÊúâÊúçÂä°Âô®ÈÉΩ‰∏çÂèØÁî®');
            this.currentServerIndex = 0;
            return;
        }
        
        const server = this.availableServers[this.currentServerIndex];
        const serverUrl = server.url;
        console.log(`Trying server ${this.currentServerIndex + 1}/${this.availableServers.length}: ${server.name || serverUrl}`);
        this.showNotification(`üîÑ ËøûÊé•Âà∞ ${server.name || 'ÊúçÂä°Âô®'}...`);
        this.connectWebSocket(serverUrl);
    }
    
    connectWebSocket(serverUrl) {
        try {
            this.websocket = new WebSocket(serverUrl || WS_CONFIG.url);
            
            this.websocket.onopen = () => {
                console.log('WebSocket connected to:', serverUrl || WS_CONFIG.url);
                this.isWebSocketConnected = true;
                this.reconnectionAttempts = 0;
                this.currentServerIndex = 0;
                this.showNotification('‚úÖ Â∑≤ËøûÊé•Âà∞‰ø°‰ª§ÊúçÂä°Âô®');
                this.startHeartbeat();
                
                // ÈÄöÁü•ÂΩìÂâçÊ®°ÂºèWebSocketÂ∑≤ËøûÊé•
                if (this.chatModeInstance && this.chatModeInstance.onWebSocketConnected) {
                    this.chatModeInstance.onWebSocketConnected();
                }
            };
            
            this.websocket.onmessage = (event) => {
                const message = JSON.parse(event.data);
                // Â∞ÜÊ∂àÊÅØËΩ¨ÂèëÁªôÂΩìÂâçÊ®°ÂºèÂ§ÑÁêÜ
                if (this.chatModeInstance && this.chatModeInstance.handleWebSocketMessage) {
                    this.chatModeInstance.handleWebSocketMessage(message);
                }
            };
            
            this.websocket.onerror = (error) => {
                console.error('WebSocket error:', error);
                this.showNotification('‚ùå ËøûÊé•ÈîôËØØÔºåÂ∞ùËØï‰∏ã‰∏Ä‰∏™ÊúçÂä°Âô®...');
                
                this.currentServerIndex++;
                setTimeout(() => this.tryNextServer(), WS_CONFIG.serverSwitchDelay);
            };
            
            this.websocket.onclose = () => {
                console.log('WebSocket disconnected');
                this.isWebSocketConnected = false;
                this.stopHeartbeat();
                
                // ÈÄöÁü•ÂΩìÂâçÊ®°ÂºèWebSocketÂ∑≤Êñ≠ÂºÄ
                if (this.chatModeInstance && this.chatModeInstance.onWebSocketDisconnected) {
                    this.chatModeInstance.onWebSocketDisconnected();
                }
                
                if (this.reconnectionAttempts < WS_CONFIG.maxReconnectAttempts) {
                    this.showNotification(`üîÑ ÈáçËøû‰∏≠... (${this.reconnectionAttempts + 1}/${WS_CONFIG.maxReconnectAttempts})`);
                    setTimeout(() => {
                        this.reconnectionAttempts++;
                        this.connectWebSocket(serverUrl);
                    }, WS_CONFIG.reconnectDelay);
                } else {
                    this.reconnectionAttempts = 0;
                    this.currentServerIndex++;
                    this.showNotification('‚ö†Ô∏è ËøûÊé•Â§±Ë¥•ÔºåÂ∞ùËØï‰∏ã‰∏Ä‰∏™ÊúçÂä°Âô®...');
                    setTimeout(() => this.tryNextServer(), WS_CONFIG.serverSwitchDelay);
                }
            };
        } catch (error) {
            console.error('Failed to connect WebSocket:', error);
        }
    }
    
    /**
     * ÂèëÈÄÅWebSocketÊ∂àÊÅØ
     * @param {Object} data - Ë¶ÅÂèëÈÄÅÁöÑÊï∞ÊçÆ
     */
    sendWebSocketMessage(data) {
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            this.websocket.send(JSON.stringify(data));
        } else {
            console.error('WebSocket is not connected');
        }
    }
    
    /**
     * ÂêØÂä®ÂøÉË∑≥Ê£ÄÊµã
     */
    startHeartbeat() {
        this.heartbeatTimer = setInterval(() => {
            if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
                this.websocket.send(JSON.stringify({ type: 'heartbeat' }));
            }
        }, 30000);
    }
    
    /**
     * ÂÅúÊ≠¢ÂøÉË∑≥Ê£ÄÊµã
     */
    stopHeartbeat() {
        if (this.heartbeatTimer) {
            clearInterval(this.heartbeatTimer);
            this.heartbeatTimer = null;
        }
    }
    
    // Ê®°ÂºèÁÆ°ÁêÜ
    async loadMode(mode) {
        try {
            // Ê∏ÖÁêÜÂΩìÂâçÊ®°ÂºèÁä∂ÊÄÅÔºà‰ΩÜ‰∏çÊñ≠ÂºÄWebSocketÔºâ
            if (this.chatModeInstance) {
                this.cleanupMode();
            }
            
            // Êõ¥Êñ∞UI
            this.updateUI(mode);
            
            // Âä®ÊÄÅÂä†ËΩΩÂØπÂ∫îÁöÑËÑöÊú¨
            if (mode === 'lan') {
                if (!window.LANMode) {
                    await this.loadScript('assets/lan-mode.js');
                }
                    // ÂàõÂª∫ÂÆû‰æãÊó∂‰º†ÂÖ•ÂèëÈÄÅÊ∂àÊÅØÁöÑÊñπÊ≥ï
                this.chatModeInstance = new window.LANMode(
                    (data) => this.sendWebSocketMessage(data),
                    this.isWebSocketConnected
                );
            } else {
                if (!window.InternetMode) {
                    await this.loadScript('assets/internet-mode.js');
                }
                this.chatModeInstance = new window.InternetMode(
                    (data) => this.sendWebSocketMessage(data),
                    this.isWebSocketConnected
                );
            }
            
            // Â¶ÇÊûúWebSocketÂ∑≤ËøûÊé•ÔºåÈÄöÁü•Êñ∞Ê®°Âºè
            if (this.isWebSocketConnected && this.chatModeInstance.onWebSocketConnected) {
                this.chatModeInstance.onWebSocketConnected();
            }
            
            this.currentMode = mode;
            console.log(`Loaded ${mode} mode`);
            
        } catch (error) {
            console.error(`Failed to load ${mode} mode:`, error);
            this.showNotification(`‚ùå Âä†ËΩΩ${mode === 'lan' ? 'Â±ÄÂüüÁΩë' : 'ÂÖ¨ÁΩë'}Ê®°ÂºèÂ§±Ë¥•`);
        }
    }
    
    loadScript(src) {
        return new Promise((resolve, reject) => {
            const existing = document.querySelector(`script[src="${src}"]`);
            if (existing) {
                resolve();
                return;
            }
            
            const script = document.createElement('script');
            script.src = src;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    switchMode(mode) {
        if (mode === this.currentMode) return;
        
        this.showNotification(`ÂàáÊç¢Âà∞${mode === 'lan' ? 'Â±ÄÂüüÁΩë' : 'ÂÖ¨ÁΩë'}Ê®°Âºè...`);
        this.loadMode(mode);
    }
    
    /**
     * Ê∏ÖÁêÜÂΩìÂâçÊ®°ÂºèÂÆû‰æã
     */
    cleanupMode() {
        if (!this.chatModeInstance) return;
        
        // Ë∞ÉÁî®Ê®°ÂºèÁöÑÊ∏ÖÁêÜÊñπÊ≥ï
        if (this.chatModeInstance.cleanup) {
            this.chatModeInstance.cleanup();
        }
        
        this.chatModeInstance = null;
    }
    
    updateUI(mode) {
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
        
        if (mode === 'lan') {
            this.elements.lanModeButton.classList.add('active');
            this.elements.autoConnectInfo.style.display = 'block';
            this.elements.manualConnectInfo.style.display = 'none';
            
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.placeholder = 'Ê£ÄÊµãÂà∞ÂêåÁΩëÊÆµÁî®Êà∑ÂêéÂç≥ÂèØÂºÄÂßãËÅäÂ§©...';
            }
        } else {
            this.elements.internetModeButton.classList.add('active');
            this.elements.autoConnectInfo.style.display = 'none';
            this.elements.manualConnectInfo.style.display = 'block';
            
            const messageInput = document.getElementById('messageInput');
            if (messageInput) {
                messageInput.placeholder = 'Âä†ÂÖ•ÊàøÈó¥ÂêéÂç≥ÂèØÂºÄÂßãËÅäÂ§©...';
            }
        }
        
        // Ê∏ÖÁ©∫ËÅäÂ§©ËÆ∞ÂΩï
        const chatMessages = document.getElementById('chatMessages');
        if (chatMessages) {
            chatMessages.innerHTML = '';
        }
        
        // Ê∏ÖÁ©∫Áî®Êà∑ÂàóË°®
        const userListContainer = document.getElementById('userListContainer');
        if (userListContainer) {
            userListContainer.innerHTML = '';
        }
    }
    
    showNotification(text) {
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.textContent = text;
        
        const existingNotifications = document.querySelectorAll('.notification:not(.notification-exit)');
        const offset = existingNotifications.length * 60;
        notification.style.top = `${20 + offset}px`;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('notification-show'), 10);
        
        setTimeout(() => {
            notification.classList.add('notification-exit');
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }
}

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
window.modeSelector = new ModeSelector();